// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CesiZen.Data.Migrations
{
    [DbContext(typeof(CesiZenDbContext))]
    [Migration("20250518192559_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CesiZen.Data.Models.InformationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Texte")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InformationModels");
                });

            modelBuilder.Entity("CesiZen.Data.Models.StressEventModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StressEvents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Questionnaire Holmes et Rahe"
                        });
                });

            modelBuilder.Entity("CesiZen.Data.Models.StressQuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<int>("StressEventModelId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StressEventModelId");

                    b.ToTable("StressQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Point = 100,
                            StressEventModelId = 1,
                            Title = "Décès du conjoint"
                        },
                        new
                        {
                            Id = 2,
                            Point = 73,
                            StressEventModelId = 1,
                            Title = "Divorce"
                        },
                        new
                        {
                            Id = 3,
                            Point = 65,
                            StressEventModelId = 1,
                            Title = "Séparation conjugale"
                        },
                        new
                        {
                            Id = 4,
                            Point = 63,
                            StressEventModelId = 1,
                            Title = "Peine d’emprisonnement"
                        },
                        new
                        {
                            Id = 5,
                            Point = 63,
                            StressEventModelId = 1,
                            Title = "Décès d’un proche parent"
                        },
                        new
                        {
                            Id = 6,
                            Point = 53,
                            StressEventModelId = 1,
                            Title = "Blessure ou maladie personnelle grave"
                        },
                        new
                        {
                            Id = 7,
                            Point = 50,
                            StressEventModelId = 1,
                            Title = "Mariage"
                        },
                        new
                        {
                            Id = 8,
                            Point = 47,
                            StressEventModelId = 1,
                            Title = "Perte d’emploi"
                        },
                        new
                        {
                            Id = 9,
                            Point = 45,
                            StressEventModelId = 1,
                            Title = "Réconciliation conjugale"
                        },
                        new
                        {
                            Id = 10,
                            Point = 45,
                            StressEventModelId = 1,
                            Title = "Retraite"
                        },
                        new
                        {
                            Id = 11,
                            Point = 44,
                            StressEventModelId = 1,
                            Title = "Changement de santé d’un membre de la famille"
                        },
                        new
                        {
                            Id = 12,
                            Point = 40,
                            StressEventModelId = 1,
                            Title = "Grossesse"
                        },
                        new
                        {
                            Id = 13,
                            Point = 39,
                            StressEventModelId = 1,
                            Title = "Difficultés sexuelles"
                        },
                        new
                        {
                            Id = 14,
                            Point = 39,
                            StressEventModelId = 1,
                            Title = "Arrivée d’un nouveau membre dans la famille"
                        },
                        new
                        {
                            Id = 15,
                            Point = 39,
                            StressEventModelId = 1,
                            Title = "Réorganisation professionnelle"
                        },
                        new
                        {
                            Id = 16,
                            Point = 38,
                            StressEventModelId = 1,
                            Title = "Changement dans la situation financière"
                        },
                        new
                        {
                            Id = 17,
                            Point = 37,
                            StressEventModelId = 1,
                            Title = "Décès d’un ami proche"
                        },
                        new
                        {
                            Id = 18,
                            Point = 36,
                            StressEventModelId = 1,
                            Title = "Changement de métier"
                        },
                        new
                        {
                            Id = 19,
                            Point = 35,
                            StressEventModelId = 1,
                            Title = "Dispute conjugale"
                        },
                        new
                        {
                            Id = 20,
                            Point = 31,
                            StressEventModelId = 1,
                            Title = "Crédit important"
                        },
                        new
                        {
                            Id = 21,
                            Point = 30,
                            StressEventModelId = 1,
                            Title = "Hypothèque ou emprunt"
                        },
                        new
                        {
                            Id = 22,
                            Point = 29,
                            StressEventModelId = 1,
                            Title = "Changement de responsabilités au travail"
                        },
                        new
                        {
                            Id = 23,
                            Point = 29,
                            StressEventModelId = 1,
                            Title = "Départ d’un enfant du foyer"
                        },
                        new
                        {
                            Id = 24,
                            Point = 29,
                            StressEventModelId = 1,
                            Title = "Problèmes avec la belle-famille"
                        },
                        new
                        {
                            Id = 25,
                            Point = 28,
                            StressEventModelId = 1,
                            Title = "Réussite personnelle remarquable"
                        },
                        new
                        {
                            Id = 26,
                            Point = 26,
                            StressEventModelId = 1,
                            Title = "Épouse commence ou arrête de travailler"
                        },
                        new
                        {
                            Id = 27,
                            Point = 26,
                            StressEventModelId = 1,
                            Title = "Début ou fin d’études"
                        },
                        new
                        {
                            Id = 28,
                            Point = 25,
                            StressEventModelId = 1,
                            Title = "Changement de conditions de vie"
                        },
                        new
                        {
                            Id = 29,
                            Point = 24,
                            StressEventModelId = 1,
                            Title = "Révision d’habitudes personnelles"
                        },
                        new
                        {
                            Id = 30,
                            Point = 23,
                            StressEventModelId = 1,
                            Title = "Problèmes avec un supérieur"
                        },
                        new
                        {
                            Id = 31,
                            Point = 20,
                            StressEventModelId = 1,
                            Title = "Changement d’horaires ou de conditions de travail"
                        },
                        new
                        {
                            Id = 32,
                            Point = 20,
                            StressEventModelId = 1,
                            Title = "Changement de résidence"
                        },
                        new
                        {
                            Id = 33,
                            Point = 20,
                            StressEventModelId = 1,
                            Title = "Changement d’école"
                        },
                        new
                        {
                            Id = 34,
                            Point = 19,
                            StressEventModelId = 1,
                            Title = "Changement dans les loisirs"
                        },
                        new
                        {
                            Id = 35,
                            Point = 19,
                            StressEventModelId = 1,
                            Title = "Changement d’activités religieuses"
                        },
                        new
                        {
                            Id = 36,
                            Point = 18,
                            StressEventModelId = 1,
                            Title = "Changement d’activités sociales"
                        },
                        new
                        {
                            Id = 37,
                            Point = 17,
                            StressEventModelId = 1,
                            Title = "Petit emprunt ou dette"
                        },
                        new
                        {
                            Id = 38,
                            Point = 16,
                            StressEventModelId = 1,
                            Title = "Changement dans les habitudes de sommeil"
                        },
                        new
                        {
                            Id = 39,
                            Point = 15,
                            StressEventModelId = 1,
                            Title = "Changement dans la fréquence des réunions de famille"
                        },
                        new
                        {
                            Id = 40,
                            Point = 13,
                            StressEventModelId = 1,
                            Title = "Vacances"
                        });
                });

            modelBuilder.Entity("CesiZen.Data.Models.StressTestResultModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("StressTestResults");
                });

            modelBuilder.Entity("CesiZen.Data.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CesiZen.Data.Models.InformationModel", b =>
                {
                    b.HasOne("CesiZen.Data.Models.UserModel", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("CesiZen.Data.Models.StressQuestionModel", b =>
                {
                    b.HasOne("CesiZen.Data.Models.StressEventModel", "StressEvent")
                        .WithMany("StressQuestions")
                        .HasForeignKey("StressEventModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StressEvent");
                });

            modelBuilder.Entity("CesiZen.Data.Models.StressTestResultModel", b =>
                {
                    b.HasOne("CesiZen.Data.Models.UserModel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CesiZen.Data.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CesiZen.Data.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CesiZen.Data.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CesiZen.Data.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CesiZen.Data.Models.StressEventModel", b =>
                {
                    b.Navigation("StressQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
