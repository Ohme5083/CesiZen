name: üß™ Test Unit and Integration

on:
  workflow_call

env:
  DOTNET_VERSION: '9.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  test-application:
    name: üß™ Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: üì¶ Cache NuGet Packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: üì¶ Restore Dependencies
        run: |
          echo "üì¶ Restoring NuGet packages..."
          dotnet restore --verbosity minimal

      - name: üîß Build Application
        run: |
          echo "üîß Building CesiZen application..."
          dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore --verbosity minimal

      - name: üß™ Run Unit Tests
        run: |
          echo "üß™ Running Unit Tests..."
          dotnet test CesiZen.Test/CesiZen.Test.csproj \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-build \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            --filter "Category!=Integration&Category!=IntegrationTest" \
            --logger "trx;LogFileName=unit-test-results.trx" \
            --logger "console;verbosity=detailed"
          
          echo "‚úÖ Unit tests completed successfully"

      - name: üîó Run Integration Tests
        run: |
          echo "üîó Running Integration Tests..."
          dotnet test CesiZen.Test/CesiZen.Test.csproj \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-build \
            --verbosity normal \
            --results-directory ./TestResults \
            --filter "Category=Integration|Category=IntegrationTest|FullyQualifiedName~IntegrationTest" \
            --logger "trx;LogFileName=integration-test-results.trx" \
            --logger "console;verbosity=detailed"
          
          echo "‚úÖ Integration tests completed successfully"

      - name: üìä Generate Coverage Report
        if: always()
        run: |
          echo "üìä Generating coverage report..."
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            -reports:"./TestResults/**/coverage.cobertura.xml" \
            -targetdir:"./TestResults/CoverageReport" \
            -reporttypes:"Html;Cobertura;JsonSummary" \
            -verbosity:Info
          
          echo "‚úÖ Coverage report generated"

      - name: üì§ Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cesizen-test-results-${{ github.run_number }}
          path: |
            ./TestResults/**/*.trx
            ./TestResults/**/TestResults.xml
          retention-days: 7

      - name: üì§ Upload Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cesizen-coverage-report-${{ github.run_number }}
          path: ./TestResults/CoverageReport/
          retention-days: 7

      - name: üìã Parse Test Results
        if: always()
        run: |
          echo "üìã Parsing test results..."
          
          # Compter les r√©sultats des tests
          UNIT_TESTS_PASSED=$(grep -o 'passed="[0-9]*"' ./TestResults/unit-test-results.trx | grep -o '[0-9]*' || echo "0")
          UNIT_TESTS_FAILED=$(grep -o 'failed="[0-9]*"' ./TestResults/unit-test-results.trx | grep -o '[0-9]*' || echo "0")
          INTEGRATION_TESTS_PASSED=$(grep -o 'passed="[0-9]*"' ./TestResults/integration-test-results.trx | grep -o '[0-9]*' || echo "0")
          INTEGRATION_TESTS_FAILED=$(grep -o 'failed="[0-9]*"' ./TestResults/integration-test-results.trx | grep -o '[0-9]*' || echo "0")
          
          echo "UNIT_TESTS_PASSED=$UNIT_TESTS_PASSED" >> $GITHUB_ENV
          echo "UNIT_TESTS_FAILED=$UNIT_TESTS_FAILED" >> $GITHUB_ENV
          echo "INTEGRATION_TESTS_PASSED=$INTEGRATION_TESTS_PASSED" >> $GITHUB_ENV
          echo "INTEGRATION_TESTS_FAILED=$INTEGRATION_TESTS_FAILED" >> $GITHUB_ENV

      - name: üìä Test Summary
        if: always()
        run: |
          echo "## üß™ CesiZen Test Suite Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìà Test Statistics" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | ‚úÖ Passed | ‚ùå Failed | Total |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-----------|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Unit Tests** | ${{ env.UNIT_TESTS_PASSED }} | ${{ env.UNIT_TESTS_FAILED }} | $((${{ env.UNIT_TESTS_PASSED }} + ${{ env.UNIT_TESTS_FAILED }})) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Integration Tests** | ${{ env.INTEGRATION_TESTS_PASSED }} | ${{ env.INTEGRATION_TESTS_FAILED }} | $((${{ env.INTEGRATION_TESTS_PASSED }} + ${{ env.INTEGRATION_TESTS_FAILED }})) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- üìä Detailed coverage report available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- üìã Test results available in TRX format" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üèóÔ∏è Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: CesiZen" >> $GITHUB_STEP_SUMMARY
          echo "- **Framework**: .NET ${{ env.DOTNET_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Configuration**: ${{ env.BUILD_CONFIGURATION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: Ubuntu Latest" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

      - name: üìÅ Display Project Structure
        if: always()
        run: |
          echo "üìÅ CesiZen Test Project Structure:"
          echo ""
          echo "üß™ Unit Tests:"
          find . -name "*Test*.cs" -not -path "*/Integration/*" -not -name "*IntegrationTest*" | head -10 || echo "No unit test files found"
          echo ""
          echo "üîó Integration Tests:"
          find . -name "*IntegrationTest*.cs" -o -path "*/Integration/*" -name "*.cs" | head -10 || echo "No integration test files found"
          echo ""
          echo "üìä Test Statistics:"
          UNIT_TEST_FILES=$(find . -name "*Test*.cs" -not -path "*/Integration/*" -not -name "*IntegrationTest*" | wc -l)
          INTEGRATION_TEST_FILES=$(find . -name "*IntegrationTest*.cs" -o -path "*/Integration/*" -name "*.cs" | wc -l)
          TOTAL_TEST_FILES=$((UNIT_TEST_FILES + INTEGRATION_TEST_FILES))
          
          echo "  - Unit test files: $UNIT_TEST_FILES"
          echo "  - Integration test files: $INTEGRATION_TEST_FILES"
          echo "  - Total test files: $TOTAL_TEST_FILES"

      - name: ‚ùå Fail on Test Failures
        if: always()
        run: |
          TOTAL_FAILED=$((${{ env.UNIT_TESTS_FAILED }} + ${{ env.INTEGRATION_TESTS_FAILED }}))
          if [ $TOTAL_FAILED -gt 0 ]; then
            echo "‚ùå Tests failed! Total failures: $TOTAL_FAILED"
            exit 1
          else
            echo "‚úÖ All tests passed successfully!"
          fi